package blockchain

import "time"

// constants.go - 区块链核心常量定义文件
//
// 本文件定义了简化版比特币网络实现中使用的所有核心常量，包括：
// - 区块大小和结构限制
// - 区块版本管理
// - 工作量证明难度参数
// - 创世区块配置参数
// - 哈希和时间相关配置
// - 网络协议标识符
// - 验证规则参数
// - 标准化错误消息
//
// 这些常量确保了网络的一致性和兼容性，是整个区块链系统的基础配置。

// ==================== 区块大小和结构限制 ====================
// 以下常量定义了区块链中区块和交易的基本大小限制，
// 这些限制确保网络性能和存储效率的平衡。
const (
	// MaxBlockSize 最大区块大小限制 (1MB = 1,000,000字节)
	//
	// 实现说明：
	// - 限制单个区块的最大序列化大小，防止区块过大影响网络传输
	// - 与比特币主网保持一致的1MB限制
	// - 包含区块头、交易数量字段和所有交易数据的总大小
	// - 用于区块验证时的大小检查
	MaxBlockSize = 1000000

	// BlockHeaderSize 区块头固定大小 (80字节)
	//
	// 实现说明：
	// - 区块头包含6个固定长度字段，总计80字节：
	//   * Version (4字节) - 区块版本号
	//   * PrevBlockHash (32字节) - 前一个区块的哈希
	//   * MerkleRoot (32字节) - 交易Merkle树根哈希
	//   * Timestamp (4字节) - 区块创建时间戳
	//   * Bits (4字节) - 难度目标的紧凑表示
	//   * Nonce (4字节) - 工作量证明随机数
	// - 固定大小确保了区块头的一致性和可预测性
	// - 用于序列化、反序列化和哈希计算
	BlockHeaderSize = 80

	// MaxTransactionsPerBlock 每个区块最大交易数量限制
	//
	// 实现说明：
	// - 基于区块大小限制和平均交易大小估算得出
	// - 防止单个区块包含过多交易导致处理性能问题
	// - 考虑了交易数量VarInt编码的开销
	// - 实际交易数量还受总区块大小限制约束
	MaxTransactionsPerBlock = 4000
)

// ==================== 区块版本管理 ====================
// 以下常量定义了区块链的版本控制机制，
// 支持协议升级和向后兼容性管理。
const (
	// BlockVersion1 区块版本1标识符
	//
	// 实现说明：
	// - 定义了区块链协议的第一个版本
	// - 包含基本的区块结构和验证规则
	// - 支持简化的交易格式和工作量证明
	// - 为未来协议升级预留版本号空间
	BlockVersion1 = 1

	// CurrentBlockVersion 当前支持的区块版本
	//
	// 实现说明：
	// - 指向当前网络使用的区块版本
	// - 新创建的区块使用此版本号
	// - 便于统一管理和升级版本控制
	// - 区块验证时检查版本兼容性的基准
	CurrentBlockVersion = BlockVersion1
)

// ==================== 工作量证明难度系统 ====================
// 以下常量定义了工作量证明算法的难度调整机制，
// 确保网络维持稳定的出块时间。
const (
	// MaxTargetBits 最大难度目标值的紧凑表示 (最低难度)
	//
	// 实现说明：
	// - 0x1d00ffff 是比特币网络的最大目标值
	// - 对应的实际目标值约为 2^224
	// - 当网络难度最低时使用此值
	// - 用于难度调整算法的上限约束
	// - 测试网络和初始化时的默认难度
	MaxTargetBits = 0x1d00ffff

	// MinTargetBits 最小难度目标值的紧凑表示 (最高难度)
	//
	// 实现说明：
	// - 定义了网络允许的最高难度水平
	// - 防止难度无限增长导致出块时间过长
	// - 用于难度调整算法的下限约束
	// - 确保网络在极端情况下仍可正常运行
	MinTargetBits = 0x01010000

	// DifficultyAdjustmentInterval 难度调整间隔 (2016个区块)
	//
	// 实现说明：
	// - 每2016个区块重新计算一次挖矿难度
	// - 基于前2016个区块的实际出块时间调整
	// - 2016 = 2周 × 7天 × 24小时 × 6个区块/小时
	// - 确保平均每10分钟出一个区块的目标
	// - 提供足够的统计样本以平滑随机波动
	DifficultyAdjustmentInterval = 2016

	// TargetBlockTime 目标出块时间 (10分钟)
	//
	// 实现说明：
	// - 网络设计的理想出块间隔时间
	// - 平衡了交易确认速度和网络稳定性
	// - 用于难度调整算法的时间基准
	// - 影响交易确认时间和网络吞吐量
	// - 与比特币主网保持一致的参数
	TargetBlockTime = 10 * time.Minute
)

// ==================== 创世区块配置参数 ====================
// 以下常量定义了网络创世区块的固定参数，
// 这些参数确保所有节点从相同的起始状态开始。
const (
	// GenesisBlockTimestamp 创世区块时间戳 (2009-01-03 18:15:05 UTC)
	//
	// 实现说明：
	// - 使用比特币创世区块的原始时间戳
	// - Unix时间戳格式，便于程序处理
	// - 标志着区块链网络的正式启动时间
	// - 所有节点必须使用相同的创世区块时间戳
	// - 用于创世区块的唯一性验证
	GenesisBlockTimestamp = 1231006505

	// GenesisBlockNonce 创世区块的工作量证明随机数
	//
	// 实现说明：
	// - 使用比特币创世区块的原始Nonce值
	// - 经过工作量证明计算得出的有效随机数
	// - 确保创世区块哈希满足难度要求
	// - 所有节点必须使用相同的Nonce值
	// - 用于创世区块的完整性验证
	GenesisBlockNonce = 2083236893

	// GenesisBlockBits 创世区块的难度目标位
	//
	// 实现说明：
	// - 创世区块使用的初始挖矿难度
	// - 与MaxTargetBits相同，表示最低难度
	// - 确保创世区块可以被成功挖出
	// - 后续区块的难度基于此值调整
	// - 网络启动时的难度基准点
	GenesisBlockBits = 0x1d00ffff

	// GenesisCoinbaseMessage 创世区块Coinbase交易中的特殊消息
	//
	// 实现说明：
	// - 引用了《泰晤士报》2009年1月3日的头版标题
	// - 证明了比特币创建的具体时间点
	// - 体现了比特币诞生的历史背景
	// - 嵌入在创世区块的Coinbase交易中
	// - 成为区块链历史的永久记录
	GenesisCoinbaseMessage = "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks"
)

// ==================== 哈希和加密相关配置 ====================
// 以下常量定义了哈希算法和加密操作的基本参数，
// 确保整个系统的加密安全性和一致性。
const (
	// HashSize SHA-256哈希结果的字节长度
	//
	// 实现说明：
	// - SHA-256算法产生256位(32字节)的哈希值
	// - 用于所有区块哈希、交易哈希和Merkle树计算
	// - 定义了[32]byte数组的标准大小
	// - 确保哈希操作的类型安全和一致性
	// - 用于哈希值的验证和比较操作
	HashSize = 32

	// ZeroHashString 零哈希的十六进制字符串表示
	//
	// 实现说明：
	// - 表示全零的32字节哈希值
	// - 用于创世区块的前块哈希字段
	// - 便于调试和日志输出时的哈希显示
	// - 提供标准的空哈希值表示格式
	// - 64个字符的十六进制字符串(32字节×2)
	ZeroHashString = "0000000000000000000000000000000000000000000000000000000000000000"
)

// ==================== 时间和时间戳管理 ====================
// 以下常量定义了区块链中时间相关的验证规则，
// 确保网络时间的一致性和防止时间攻击。
const (
	// MaxTimeOffset 允许的最大时间偏移量 (2小时)
	//
	// 实现说明：
	// - 区块时间戳不能超过当前时间+2小时
	// - 防止恶意矿工使用未来时间戳
	// - 考虑了全球网络的时钟同步误差
	// - 平衡了时间验证的严格性和实用性
	// - 用于新区块的时间戳有效性检查
	MaxTimeOffset = 2 * time.Hour

	// MinTimestampDelta 连续区块间的最小时间差 (1秒)
	//
	// 实现说明：
	// - 确保区块时间戳的单调递增性
	// - 防止时间戳回滚攻击
	// - 提供基本的时间顺序保证
	// - 允许快速出块但维持时间逻辑
	// - 用于区块链时间序列的完整性验证
	MinTimestampDelta = 1 * time.Second
)

// ==================== 区块和交易验证规则 ====================
// 以下常量定义了区块链验证过程中的各种限制参数，
// 确保网络安全性和防止各种攻击向量。
const (
	// MaxBlockSigOps 每个区块允许的最大签名验证操作数
	//
	// 实现说明：
	// - 限制单个区块中的签名验证计算量
	// - 防止恶意构造的区块消耗过多CPU资源
	// - 基于平均签名验证时间和区块处理时间估算
	// - 确保节点能够及时处理和验证区块
	// - 包含所有交易输入和输出的签名操作
	MaxBlockSigOps = 20000

	// MaxScriptSize 交易脚本的最大字节长度
	//
	// 实现说明：
	// - 限制单个交易脚本的复杂度
	// - 防止脚本执行时间过长或内存消耗过大
	// - 平衡了脚本功能性和系统性能
	// - 适用于输入脚本和输出脚本
	// - 用于交易验证时的脚本大小检查
	MaxScriptSize = 10000

	// MaxTxSize 单个交易的最大字节长度
	//
	// 实现说明：
	// - 限制单个交易的序列化大小
	// - 防止巨型交易影响网络传输和存储
	// - 确保交易能够在标准网络条件下传播
	// - 包含交易的所有输入、输出和脚本数据
	// - 用于交易池和区块构建时的大小验证
	MaxTxSize = 100000
)

// ==================== 网络协议标识符 ====================
// 以下常量定义了不同网络环境的魔数标识符，
// 用于区分主网、测试网和开发网络。
const (
	// MainNetMagic 比特币主网络的魔数标识符
	//
	// 实现说明：
	// - 用于网络消息的协议识别
	// - 确保不同网络间的消息隔离
	// - 防止测试网消息干扰主网运行
	// - 网络握手和消息验证的基础
	// - 与比特币主网保持一致的魔数
	MainNetMagic = 0xD9B4BEF9

	// TestNetMagic 比特币测试网络的魔数标识符
	//
	// 实现说明：
	// - 用于测试网络环境的协议识别
	// - 允许开发者安全地测试新功能
	// - 与主网完全隔离的测试环境
	// - 支持重置和实验性修改
	// - 便于开发和调试区块链应用
	TestNetMagic = 0xDAB5BFFA

	// RegTestMagic 回归测试网络的魔数标识符
	//
	// 实现说明：
	// - 用于本地开发和自动化测试
	// - 支持完全控制的测试环境
	// - 可以即时挖矿和快速区块生成
	// - 适合单元测试和集成测试
	// - 提供可重复的测试条件
	RegTestMagic = 0xFABFB5DA
)

// ==================== 标准化错误消息 ====================
// 以下常量定义了区块链验证过程中的标准错误消息，
// 确保错误处理的一致性和可维护性。
const (
	// 区块级别错误消息
	ErrBlockTooLarge        = "区块大小超过限制"      // 区块序列化后大小超过MaxBlockSize
	ErrInvalidBlockHeader   = "无效的区块头"        // 区块头格式错误或字段无效
	ErrInvalidBlockHash     = "无效的区块哈希"       // 区块哈希不满足难度要求
	ErrInvalidPrevBlockHash = "无效的前块哈希"       // 前块哈希不匹配或不存在
	ErrInvalidMerkleRoot    = "无效的Merkle根"    // Merkle根与交易列表不匹配
	ErrInvalidTimestamp     = "无效的时间戳"        // 时间戳超出允许范围
	ErrInvalidDifficulty    = "无效的难度目标"       // 难度位格式错误或超出范围
	ErrInvalidNonce         = "无效的Nonce值"     // Nonce值不满足工作量证明
	ErrBlockVersionTooOld   = "区块版本过旧"        // 区块版本低于网络要求
	ErrTooManyTransactions  = "交易数量超过限制"      // 区块包含的交易数超过上限
	ErrEmptyBlock           = "空区块"           // 区块不包含任何交易
	ErrInvalidCoinbase      = "无效的Coinbase交易" // Coinbase交易格式错误
)
